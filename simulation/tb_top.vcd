$date
	Sat Nov 19 11:10:20 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_top $end
$var wire 8 ! A [7:0] $end
$var wire 8 " B [7:0] $end
$var wire 8 # C [7:0] $end
$var wire 8 $ D [7:0] $end
$var wire 1 % zero_flag $end
$var wire 8 & out [7:0] $end
$var wire 1 ' carry_flag $end
$var wire 4 ( bus_low [3:0] $end
$var wire 4 ) bus_high [3:0] $end
$var reg 1 * clk $end
$var reg 1 + clr $end
$scope module uut $end
$var wire 8 , A [7:0] $end
$var wire 8 - B [7:0] $end
$var wire 8 . C [7:0] $end
$var wire 8 / D [7:0] $end
$var wire 1 0 buf_clk $end
$var wire 8 1 bus [7:0] $end
$var wire 1 ' carry_flag $end
$var wire 1 * clk $end
$var wire 1 + clr $end
$var wire 1 2 ld_acc $end
$var wire 1 3 ld_b_reg $end
$var wire 1 4 ld_ir $end
$var wire 1 5 ld_mar $end
$var wire 1 6 ld_out_reg $end
$var wire 1 7 low_acc_out_en $end
$var wire 1 % zero_flag $end
$var wire 1 8 subadd_out_en $end
$var wire 1 9 sub_add $end
$var wire 1 : rd_rs $end
$var wire 1 ; pc_out_en $end
$var wire 8 < out [7:0] $end
$var wire 4 = op_code [3:0] $end
$var wire 4 > mar_out [3:0] $end
$var wire 1 ? low_mem_out_en $end
$var wire 1 @ low_ld_out_reg $end
$var wire 1 A low_ld_mar $end
$var wire 1 B low_ld_ir $end
$var wire 1 C low_ld_b_reg $end
$var wire 1 D low_ld_acc $end
$var wire 1 E low_ir_out_en $end
$var wire 1 F low_halt $end
$var wire 8 G ir_out [7:0] $end
$var wire 1 H inc $end
$var wire 4 I bus_low [3:0] $end
$var wire 4 J bus_high [3:0] $end
$var wire 8 K b_reg_out [7:0] $end
$var wire 1 L acc_out_en $end
$var wire 8 M acc_out [7:0] $end
$scope module acc $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 8 N d [7:0] $end
$var wire 1 2 i_en $end
$var wire 8 O qbar [7:0] $end
$var reg 8 P q [7:0] $end
$upscope $end
$scope module asub $end
$var wire 8 Q A [7:0] $end
$var wire 8 R C [7:0] $end
$var wire 8 S D [7:0] $end
$var wire 1 T add_sub_low_out_en $end
$var wire 1 U cout $end
$var wire 4 V op_new [3:0] $end
$var wire 8 W out [7:0] $end
$var wire 1 9 sub $end
$var wire 1 8 out_en $end
$var wire 8 X add_sub_out [7:0] $end
$var wire 8 Y B [7:0] $end
$scope module r1 $end
$var wire 8 Z a [7:0] $end
$var wire 1 [ cin $end
$var wire 1 U cout $end
$var wire 4 \ operation [3:0] $end
$var wire 8 ] sum [7:0] $end
$var wire 1 9 sub $end
$var wire 8 ^ b [7:0] $end
$var reg 8 _ temp [7:0] $end
$upscope $end
$scope module tri8 $end
$var wire 8 ` in [7:0] $end
$var wire 1 T low_enable $end
$var wire 8 a out [7:0] $end
$scope module b0 $end
$var wire 4 b in [3:0] $end
$var wire 1 T low_enable $end
$var wire 4 c out [3:0] $end
$upscope $end
$scope module b1 $end
$var wire 4 d in [3:0] $end
$var wire 1 T low_enable $end
$var wire 4 e out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module b_reg $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 8 f d [7:0] $end
$var wire 1 3 i_en $end
$var wire 8 g qbar [7:0] $end
$var reg 8 h q [7:0] $end
$upscope $end
$scope module buf0 $end
$var wire 4 i in [3:0] $end
$var wire 4 j out [3:0] $end
$var wire 1 E low_enable $end
$upscope $end
$scope module buf1 $end
$var wire 8 k in [7:0] $end
$var wire 1 7 low_enable $end
$var wire 8 l out [7:0] $end
$scope module b0 $end
$var wire 4 m in [3:0] $end
$var wire 1 7 low_enable $end
$var wire 4 n out [3:0] $end
$upscope $end
$scope module b1 $end
$var wire 4 o in [3:0] $end
$var wire 1 7 low_enable $end
$var wire 4 p out [3:0] $end
$upscope $end
$upscope $end
$scope module ir $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 8 q d [7:0] $end
$var wire 1 4 i_en $end
$var wire 8 r qbar [7:0] $end
$var reg 8 s q [7:0] $end
$upscope $end
$scope module mar $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 4 t d [3:0] $end
$var wire 1 5 i_en $end
$var wire 4 u qbar [3:0] $end
$var reg 4 v q [3:0] $end
$upscope $end
$scope module mem $end
$var wire 8 w acc_out [7:0] $end
$var wire 4 x addr [3:0] $end
$var wire 4 y op_code [3:0] $end
$var wire 1 ? low_o_en $end
$var reg 8 z data_out [7:0] $end
$var reg 8 { temp [7:0] $end
$upscope $end
$scope module out_reg $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 8 | d [7:0] $end
$var wire 1 6 i_en $end
$var wire 8 } qbar [7:0] $end
$var reg 8 ~ q [7:0] $end
$upscope $end
$scope module pc $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 1 !" not_pc_out_en $end
$var wire 1 ; pc_out_en $end
$var wire 4 "" out [3:0] $end
$var wire 1 H inc $end
$var reg 4 #" hold [3:0] $end
$scope module tbuf $end
$var wire 4 $" in [3:0] $end
$var wire 1 !" low_enable $end
$var wire 4 %" out [3:0] $end
$upscope $end
$upscope $end
$scope module seq $end
$var wire 1 L acc_out_en $end
$var wire 1 &" aluon $end
$var wire 1 0 clk $end
$var wire 1 + clr $end
$var wire 1 '" cmp_imm $end
$var wire 1 (" cmp_ratna $end
$var wire 1 )" lda_imm $end
$var wire 1 E low_ir_out_en $end
$var wire 1 D low_ld_acc $end
$var wire 1 C low_ld_b_reg $end
$var wire 1 B low_ld_ir $end
$var wire 1 A low_ld_mar $end
$var wire 1 @ low_ld_out_reg $end
$var wire 1 ? low_mem_out_en $end
$var wire 4 *" op_code [3:0] $end
$var wire 1 +" or_ratna $end
$var wire 1 ," out $end
$var wire 1 -" sta_imm $end
$var wire 1 9 sub_add $end
$var wire 1 8 subadd_out_en $end
$var wire 1 ." temp $end
$var wire 1 /" xor_ratna $end
$var wire 1 0" xor_imm $end
$var wire 6 1" t [5:0] $end
$var wire 1 2" sub_imm $end
$var wire 1 3" sub $end
$var wire 1 4" store $end
$var wire 1 ; pc_out_en $end
$var wire 1 5" move_imm $end
$var wire 1 6" move $end
$var wire 1 F low_halt $end
$var wire 1 7" lda $end
$var wire 1 H inc $end
$var wire 1 8" compare $end
$var wire 1 9" and_ratna $end
$var wire 1 :" and_imm $end
$var wire 1 ;" add_imm $end
$var wire 1 <" add $end
$scope module counter $end
$var wire 1 0 clk $end
$var wire 1 + res $end
$var reg 6 =" t [5:0] $end
$upscope $end
$scope module decoder $end
$var wire 1 '" cmp_imm $end
$var wire 1 F low_halt $end
$var wire 4 >" op_code [3:0] $end
$var wire 1 +" or_imm $end
$var wire 1 +" or_ratna $end
$var wire 1 ?" out $end
$var wire 1 /" xor_ratna $end
$var wire 1 0" xor_imm $end
$var wire 1 2" sub_imm $end
$var wire 1 3" sub $end
$var wire 1 4" store $end
$var wire 1 5" move_imm $end
$var wire 1 6" move $end
$var wire 1 7" lda $end
$var wire 1 8" compare $end
$var wire 1 9" and_ratna $end
$var wire 1 :" and_imm $end
$var wire 1 ;" add_imm $end
$var wire 1 <" add $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x?"
bx >"
b100000 ="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
b100000 1"
x0"
x/"
1."
z-"
z,"
x+"
bx *"
z)"
z("
z'"
x&"
bx %"
bx $"
bx #"
bx ""
0!"
bx ~
bx }
bzxxxx |
bx {
bz z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bzxxxx q
bz p
bx o
bz n
bx m
bzxxxx l
bx k
bz j
bx i
bx h
bx g
bzxxxx f
bz e
bx d
bz c
bx b
bzxxxx a
bx `
bx _
bx ^
bx ]
bx \
0[
bx Z
bx Y
bx X
bzxxxx W
bx V
zU
1T
bz S
bz R
bx Q
bx P
bx O
bzxxxx N
bx M
0L
bx K
bz J
bx I
0H
bx G
xF
1E
1D
1C
1B
0A
1@
1?
bx >
bx =
bx <
1;
x:
09
08
17
06
15
04
03
02
bzxxxx 1
x0
bz /
bz .
bz -
bz ,
x+
x*
bz )
bx (
z'
bx &
z%
bz $
bz #
bz "
bz !
$end
#2
x0
1F
0?"
b0 (
b0 I
b0 t
0:
bz0000 1
bz0000 N
bz0000 W
bz0000 a
bz0000 f
bz0000 l
bz0000 q
bz0000 |
b0 ""
b0 %"
b1111 u
b11111111 r
17"
04"
06"
05"
0<"
0;"
03"
02"
08"
09"
0:"
0+"
0/"
00"
b0 =
b0 V
b0 \
b0 y
b0 *"
b0 >"
b0 i
b0 m
b0 o
b11111111 O
b11111111 g
b11111111 }
b0 #"
b0 $"
b0 >
b0 v
b0 x
b0 G
b0 s
b0 M
b0 P
b0 Q
b0 Z
b0 k
b0 w
b0 K
b0 Y
b0 ^
b0 h
b0 &
b0 <
b0 ~
1+
#8
0+
#10
10
1*
#15
05
1A
bz (
bz I
bz t
bz 1
bz N
bz W
bz a
bz f
bz l
bz q
bz |
bz ""
bz %"
1!"
0;
1H
b10000 1"
b10000 ="
00
0*
#20
b1 #"
b1 $"
10
1*
#25
b0 )
b0 J
b1000 (
b1000 I
b1000 t
b1000 1
b1000 N
b1000 W
b1000 a
b1000 f
b1000 l
b1000 q
b1000 |
b1000 z
14
0?
0B
0H
b1000 1"
b1000 ="
00
0*
#30
b11110111 r
b1000 i
b1000 G
b1000 s
10
1*
#35
bx )
bx J
15
x6
bx000 (
bx000 I
bx000 t
bz z
0A
x@
bx000 1
bx000 N
bx000 W
bx000 a
bx000 f
bx000 l
bx000 q
bx000 |
bx n
bx p
x7
b1000 j
0E
04
1?
xL
1B
b100 1"
b100 ="
00
0*
#40
bx111 u
bx000 >
bx000 v
bx000 x
10
1*
#45
12
05
06
x3
bz )
bz J
0D
bz (
bz I
bz t
0?
1A
1@
x."
xC
bz n
bz p
17
bz 1
bz N
bz W
bz a
bz f
bz l
bz q
bz |
bz j
1E
0L
b10 1"
b10 ="
00
0*
#50
bz m
bz o
bx O
bz M
bz P
bz Q
bz Z
bz k
bz w
10
1*
#55
x2
03
bx (
bx I
bx t
bx )
bx J
xD
1?
1."
1C
bx c
bx 1
bx N
bx W
bx a
bx f
bx l
bx q
bx |
bx e
xT
x8
b1 1"
b1 ="
00
0*
#60
10
1*
#65
02
b1 (
b1 I
b1 t
bz )
bz J
1D
15
bz c
bz0001 1
bz0001 N
bz0001 W
bz0001 a
bz0001 f
bz0001 l
bz0001 q
bz0001 |
bz e
1T
0A
08
b1 ""
b1 %"
0!"
1;
b100000 1"
b100000 ="
00
0*
#70
b1110 u
b1 >
b1 v
b1 x
10
1*
#75
05
1A
bz (
bz I
bz t
bz 1
bz N
bz W
bz a
bz f
bz l
bz q
bz |
bz ""
bz %"
1!"
0;
1H
b10000 1"
b10000 ="
00
0*
#80
b10 #"
b10 $"
10
1*
#85
bx )
bx J
bx (
bx I
bx t
bx 1
bx N
bx W
bx a
bx f
bx l
bx q
bx |
bx z
b1 {
14
0?
0B
0H
b1000 1"
b1000 ="
00
0*
#90
xF
x?"
x:
bx r
x7"
x4"
x6"
x5"
x<"
x;"
x3"
x2"
x8"
x9"
x:"
x+"
x/"
x0"
bx =
bx V
bx \
bx y
bx *"
bx >"
bx i
bx G
bx s
x0
1*
#95
x0
0*
#100
x0
1*
#105
x0
0*
#110
x0
1*
#115
x0
0*
#120
x0
1*
#125
x0
0*
#130
x0
1*
#135
x0
0*
#140
x0
1*
#145
x0
0*
#150
x0
1*
#155
x0
0*
#160
x0
1*
#165
x0
0*
#170
x0
1*
#175
x0
0*
#180
x0
1*
#185
x0
0*
#190
x0
1*
#195
x0
0*
#200
x0
1*
#205
x0
0*
#210
x0
1*
#215
x0
0*
#220
x0
1*
#225
x0
0*
#230
x0
1*
#235
x0
0*
#240
x0
1*
#245
x0
0*
#250
x0
1*
#255
x0
0*
#260
x0
1*
#265
x0
0*
#270
x0
1*
#275
x0
0*
#280
x0
1*
#285
x0
0*
#290
x0
1*
#295
x0
0*
#300
x0
1*
#305
x0
0*
#310
x0
1*
#315
x0
0*
#320
x0
1*
#325
x0
0*
#330
x0
1*
#335
x0
0*
#340
x0
1*
#345
x0
0*
#350
x0
1*
#355
x0
0*
#360
x0
1*
#365
x0
0*
#370
x0
1*
#375
x0
0*
#380
x0
1*
#385
x0
0*
#390
x0
1*
#395
x0
0*
#400
x0
1*
#405
x0
0*
#410
x0
1*
#415
x0
0*
#420
x0
1*
#425
x0
0*
#430
x0
1*
#435
x0
0*
#440
x0
1*
#445
x0
0*
#450
x0
1*
#455
x0
0*
#460
x0
1*
#465
x0
0*
#470
x0
1*
#475
x0
0*
#480
x0
1*
#485
x0
0*
#490
x0
1*
#495
x0
0*
#500
x0
1*
#505
x0
0*
#508
